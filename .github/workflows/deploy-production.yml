name: Production Deployment (AWS App Runner)

on:
  # Trigger only after tests pass
  workflow_run:
    workflows: ["Ansari WhatsApp Pytests"]
    types:
      - completed
    branches:
      - main
  # Allow manual triggering
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production-aws
    # Only run if tests passed or if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ansari-whatsapp
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to App Runner
        id: deploy-apprunner
        uses: awslabs/amazon-app-runner-deploy@main
        env:
          # Backend Integration
          BACKEND_SERVER_URL: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'backend-server-url') }}
          DEPLOYMENT_TYPE: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'deployment-type') }}

          # Meta/WhatsApp Credentials
          META_ACCESS_TOKEN_FROM_SYS_USER: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'meta-access-token-from-sys-user') }}
          META_BUSINESS_PHONE_NUMBER_ID: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'meta-business-phone-number-id') }}
          META_WEBHOOK_VERIFY_TOKEN: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'meta-webhook-verify-token') }}
          META_API_VERSION: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'meta-api-version') }}

          # Application Settings
          HOST: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'host') }}
          PORT: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'port') }}
          WHATSAPP_CHAT_RETENTION_HOURS: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'whatsapp-chat-retention-hours') }}
          WHATSAPP_MESSAGE_AGE_THRESHOLD_SECONDS: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'whatsapp-message-age-threshold-seconds') }}
          WHATSAPP_UNDER_MAINTENANCE: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'whatsapp-under-maintenance') }}

          # Operational Settings
          ALWAYS_RETURN_OK_TO_META: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'always-return-ok-to-meta') }}
          LOGGING_LEVEL: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'logging-level') }}
          ORIGINS: ${{ format('{0}{1}', secrets.SSM_ROOT_PRODUCTION, 'origins') }}

        with:
          service: ansari-whatsapp-production
          image: ${{ steps.build-image.outputs.image }}
          access-role-arn: ${{ secrets.SERVICE_ROLE_ARN }}
          region: ${{ secrets.AWS_REGION }}
          cpu: 1
          memory: 2
          port: 8001
          wait-for-service-stability-seconds: 1200
          copy-env-vars: |
            DEPLOYMENT_TYPE
          copy-secret-env-vars: |
            BACKEND_SERVER_URL
            META_ACCESS_TOKEN_FROM_SYS_USER
            META_BUSINESS_PHONE_NUMBER_ID
            META_WEBHOOK_VERIFY_TOKEN
            META_API_VERSION
            HOST
            PORT
            WHATSAPP_CHAT_RETENTION_HOURS
            WHATSAPP_MESSAGE_AGE_THRESHOLD_SECONDS
            WHATSAPP_UNDER_MAINTENANCE
            ALWAYS_RETURN_OK_TO_META
            LOGGING_LEVEL
            ORIGINS
          instance-role-arn: ${{ secrets.INSTANCE_ROLE_ARN }}

      - name: App Runner URL
        run: echo "App runner URL ${{ steps.deploy-apprunner.outputs.service-url }}"
